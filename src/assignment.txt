Approach: We will create a react component called OptionBar that will hold our input fields and state variables for the options limit, page, sortBy and order.
In ./src/App.js, create a new component called OptionBar.
In <OptionBar/>, create 4 new state variables along with their setter functions: [1]
limit with an inital value set to 10
page with an initial value set to 1
sortBy with an initial value set to ""
order with an initial value set to ""
In the JSX of <OptionBar/>,
Add a label with the display value of Limit
Add a type="number" input field that has a value attribute equal to the limit state variable and an onChange handler that sets limit to the event value. [2]
Add a label with the display value of Page
Add a type="number" input field that has a value attribute equal to the page state variable and an onChange handler that sets page to the event value.
Add a label with the display value of SortBy
Add a select field with an onChange handler that sets the sortBy state variable to the event value. Additionally, add the following as options to the select field: [3]
An empty option as the default
An option with the value and display text of id
An option with the value and display text of title
An option with the value and display text of createdAt
Add a label with the display value of Order
Add a select field with an onChange handler that sets the order state variable to the event value. Additionally, add the following as options to the select field:
An empty option as the default
An option with the value and display text of asc
An option with the value and display text of desc
Generating URL Params
Approach: Now that we have our input fields setup, we need to use those inputs to generate the parameter portion of our url inside of the useEffect function of <App/>. We will be creating a new function to generate the parameter string and set a new urlParamString state variable in the body of <App/>. We will then pass that generator function down as a prop into <OptionBar/> to update the urlParamString state variable every time a user updates one of the input fields.
Add a new state variable to <App/> called urlParamString and initialize it to an empty string "".
In the body of <App/>, create a new function called generateUrlParams with the parameters limit, page, sortBy and order. [4]
Inside the function generateUrlParams, implement the following:
Create a new variable using let called urlParams that equals the string "?"
For each of the four function parameters limit, page, sortBy and order, concatenate four strings onto urlParams that each have the form {parameter-name}={parameter-value}. Each of these four strings should have the "&" symbol between them.
E.G. If limit = 5 and page = 2, the urlParamString state variable should be set to "?limit=5&page=2". If the limit = 4, page = 3, sortBy = createdAt and order = asc, the urlParamString state variable should be set to "?limit=4&page=3&sortBy=createdAt&order=asc".
Finally, call the setter function setUrlParamString with urlParams passed as an argument to set the state variable urlParamString to our generated urlParams string.
In the fetchBlogs async function, update the url passed into the fetch call to be: {urlEndpoint}/blogs{urlParamString}. This way, the urlParamString we generated will be automatically appended to our blogs API url. [5]
In the JSX of <App/>, add an instance of <OptionBar/> above <BlogList/> with the generateUrlParams function passed in as a prop to <OptionBar/>. [6]
Implementing the useEffects
Approach:
We have already created a useEffect in <App/> that will fetch our blogs on page load. Now we want to trigger this effect to run when our users enter a new value into any of our input fields. To do this, we will first set the urlParamString state variable as a dependency inside the useEffect dependency array.
This way, whenever the function generateUrlParams is called from <OptionBar/>, the urlParamString state variable will update with a new value and the effect function in the useEffect will be triggered, refetching our list of blogs with the updated query params.
Additionally, we will want a way of calling generateUrlParams inside of <OptionBar/> every time the user updates an input field. One way we could do this is to pass generateUrlParams into the onChange handlers of all of our input fields. But remember that useEffect is a way of "kicking off" some functionality as a response to some event. So instead, we will be creating a new useEffect in the body of <OptionBar/> that watches all the input state variables for changes and calls generateUrlParams in the effect function.
Thus once we have everything set up properly, we should be able to:
Update one of the input fields in <OptionBar/>
Which will then in turn trigger the useEffect of <OptionBar/>
Which will then call generateUrlParams
Which will then set urlParamString state to a new value
Which will then trigger the <App/> useEffect
Which will then call the blogs API
Which will then retrieve a new blog list
Which will finally update the blogs state variable to render our blogs to the page.
In the dependency array of the useEffect in <App/> that is calling fetchBlogs, add urlParamString as an item. [7]
In the body of <OptionBar/>, create a new useEffect. The effect function of this useEffect should call props.generateUrlParams with the state variables limit, page, sortBy and order passed as arguments. The dependency array for this useEffect should be watching the state variables limit, page, sortBy and order. [8]
If you implemented all of the above correctly, you should be able to change the input values in <OptionBar/> and have the displayed blog list update in real time.
Note: Due to the way the API works, limit and page must both have numerical values for either one to work; additionally, sortBy and order must both have proper string values in order for either one to work. I.E. For the API to recognize the value of the limit param, the page param must have a value as well. For the sortBy param, the order param must also have a value and vice versa.



























Creating the OptionBar
Approach: We will create a react component called OptionBar that will hold our input fields and state variables for the options limit, page, sortBy and order.
[x] Create a new component called OptionBar.
In OptionBar, create 4 new state variables:
[x] limit, initialized to 10
[x] page, initialized to 1
[x] sortBy, initialized to ""
[x] order, initialized to ""
In the JSX of <OptionBar/>,
[x] Add a label called Limit and a type="number" input field that sets the limit state variable. Additionally, this input field should have its value attribute set to limit.
[x] Add a label called Page and a type="number" input field that sets the page state variable. Additionally, this input field should have its value attribute set to page.
[x] Add a label called SortBy and a select field that sets the sortBy state variable with the following options:
[x] An empty option as the default
[x] An option with the value and display text of id
[x] An option with the value and display text of title
[x] An option with the value and display text of createdAt
[x] Add a label called Order and a select field that sets the order state variable with the following options:
[x] An empty option as the default
[x] An option with the value and display text of asc
[x] An option with the value and display text of desc
Generating URL Params
Approach: Now that we have our input fields setup, we need to use those inputs to generate the parameter portion of our url inside of the useEffect function of <App/>. We will be creating a new function to generate the parameter string and set a new urlParamString state variable in the body of <App/>. We will then pass that generator function down as a prop into <OptionBar/> to update the urlParamString state variable every time a user updates one of the input fields.
[x] Add a new state variable to <App/> called urlParamString and initialize it to an empty string "".
[x] In the body of <App/>, create a new function called generateUrlParams with the parameters limit, page, sortBy and order.
[x] This function should take these four parameters and create a query param string that will be concatenated onto our blogs fetch url. The param string should start with a question mark "?". Then for each parameter, concatenate the string {parameter-name}={parameter-value} onto the param string separated by an "&". Once you generate the query string in the function, set the state variable urlParamString to the generated query string. E.G. If limit = 5 and page = 2, the urlParamString state variable should be set to "?limit=5&page=2". If the limit = 4, page = 3, sortBy = createdAt and order = asc, the urlParamString state variable should be set to "?limit=4&page=3&sortBy=createdAt&order=asc".
[x] In the fetchBlogs async function, update the url passed into the fetch call to be: {urlEndpoint}/blogs{urlParamString}. This way, the urlParamString we generated will be automatically appended to our blogs API url.
[x] In the JSX of <App/>, add an instance of <OptionBar/> above <BlogList/> with the generateUrlParams function passed in as a prop to <OptionBar/>.
Implementing the useEffects
Approach:
[x] We have already created a useEffect in <App/> that will fetch our blogs on page load. Now we want to trigger this effect to run when our users enter a new value into any of our input fields. To do this, we will first set the urlParamString state variable as a dependency inside the useEffect dependency array.
[] This way, whenever the function generateUrlParams is called from <OptionBar/>, the urlParamString state variable will update with a new value and the effect function in the useEffect will be triggered, refetching our list of blogs with the updated query params.
Additionally, we will want a way of calling generateUrlParams inside of <OptionBar/> every time the user updates an input field. One way we could do this is to pass generateUrlParams into the onChange handlers of all of our input fields. But remember that useEffect is a way of "kicking off" some functionality as a response to some event. So instead, we will be creating a new useEffect in the body of <OptionBar/> that watches all the input state variables for changes and calls generateUrlParams in the effect function.
Thus once we have everything set up properly, we should be able to:
Update one of the input fields in <OptionBar/>
[] Which will then in turn trigger the useEffect of <OptionBar/>
[] Which will then call generateUrlParams
[] Which will then set urlParamString state to a new value
[] Which will then trigger the <App/> useEffect
[] Which will then call the blogs API
Which will then retrieve a new blog list
[] Which will finally update the blogs state variable to render our blogs to the page.
[] In the dependency array of the useEffect in <App/> that is calling fetchBlogs, add urlParamString as an item.
[] In <OptionBar/>, create a new useEffect. The effect function of this useEffect should call props.generateUrlParams with the state variables limit, page, sortBy and order passed as arguments. The dependency array for this useEffect should be watching the state variables limit, page, sortBy and order.
If you implemented all of the above correctly, you should be able to change the input values in <OptionBar/> and have the displayed blog list update in real time.
Note: Due to the way the API works, limit and page must both have numerical values for either one to work; additionally, sortBy and order must both have proper string values in order for either one to work. I.E. For the API to recognize the value of the limit param, the page param must have a value as well. For the sortBy param, the order param must also have a value and vice versa.












Implement Blog List
Approach: Before implementing the useEffect and fetch functionality, we will use sampleBlogs to scaffold out the app UI first. For simplicity, we will create all the components in the ./src/App.js file.
[x] Create a new state variable in <App/> called blogs, initialized to sampleBlogs (or a copy of sampleBlogs using the spread operator). [1]
[x] Create two new components <BlogList/> and <BlogListCard/>. Both should have simple enclosing div's in the JSX return statement for now. [2]
[x] Add an instance of <BlogList/> to the JSX of <App/>.
[x] Pass the blogs state variable in as a prop to <BlogList/> in the JSX of <App/>. [3]
[x] In the JSX of <BlogList/>, add a map function that maps through the blogs array coming from the props and return a <BlogListCard/> in the map for every blog in the array of blogs. Additionally in the map, pass in the blog parameter as a prop to the <BlogListCard/>. [4]
In <BlogListCard/>,
[x] Display the title of the blog coming in through props in an h2 tag.
[x] Display the author of the blog coming in through props in a p tag.
[x] Display the text of the blog coming in through props in a p tag.
If you implemented the above correctly, you should be able to visit localhost:3000 and see the sample blogs rendered to the page as a list of <BlogListCard/>'s.



High Level
3: Implement Fetch and useEffect

Approach: Now that we have the sampleBlogs displaying to the page, we are going to fetch the actual blog list from the mock api endpoint.
[x] Create a new file ./.env
Note: This file does NOT go into the ./src folder. It should be in the root folder on the same level as package.json.
[x] In ./.env, add the following environment variable
REACT_APP_URL_ENDPOINT=https://62a8b06d943591102ba80fee.mockapi.io
Important: Specifically for react applications, all environment variables MUST be prefixed with REACT_APP.
[x] In the global scope above <App/>, create a new variable called urlEndpoint and set it equal to the REACT_APP_URL_ENDPOINT environment variable.
Everytime .env file is added/updated in the application, you will have to restart your react terminal process.
[x] In the body of <App/>, add an invocation of the useEffect hook with an empty function passed in as the first argument and an empty array passed in as the second.
Note:
The empty function passed into useEffect is known as an effect function.
The empty array is called the dependency array and is necessary to prevent repeated calls of the effect function every time <App/> renders. If we did not have the empty array here (try taking it out once you have the app up and running to see what happens), the effect function would trigger every time <App/> rerenders which will happen every time setBlogs is called. This triggering an endless loop of rerendering.
[x] Inside the effect function you just created, write a new async function called fetchBlogs. Fetch blogs should:
[x] Invoke the fetch api with the url {urlEndpoint}/blogs and assign that to a variable called result.
Note: This awaited invocation of fetch is going to make an HTTP request to the url string passed into the fetch() function. The variable result will be an object containing the HTTP result of the request; which includes the response payload as well as information of the response itself.
[x] Invoke the .json() method on result and assign that to a variable called blogs.
Note: The result.json() method retrieves the actual data/payload of the response and assigns it to the variable result.
[x] Call the setBlogs setter function on blogs.
Suggestion: console.log() result and blogs to see the result of the fetch() call.
[x] Inside the effect function and below the fetchBlogs function definition, call fetchBlogs()
If you implemented the above correctly, you should see the entire list of 50 blog posts fetched from mockapi rendered to the page.






